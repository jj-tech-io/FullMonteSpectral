#pragma once
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <math.h>
#include <string>
#include <random>
#include <chrono>
#include <fstream>
#include <map>
#include <future>
#include <mutex>
#include <queue>
#include <thread>
#include <condition_variable>
#include <sstream>
using namespace std;
const double deoxy_data[] = {
            97.58, 97.24668630103302, 100.024, 105.91194109690093, 119.18599999999998, 144.12166711756137, 171.316, 191.36605619773087, 213.689, 247.70199569605347, 272.27, 266.2579696259483, 223.01, 135.87018654825664, 51.604, 16.97691108451183, 9.882, 8.212346944672365, 8.899000000000001, 8.873007247453975, 8.634, 8.681609570603786, 9.119, 10.049335328923313, 11.365000000000002, 12.958378455856344, 14.672999999999998, 16.35239393593862, 18.105, 20.039257928511944, 22.129, 24.348058492989708, 26.427, 28.096391113549814, 29.245000000000005, 29.76159482571142, 29.669, 28.990039932181688, 27.538, 25.126165581198457, 21.955, 18.22496658062756, 14.467, 11.212034935036193, 8.525, 6.470823809155298, 4.979000000000001, 3.9790222100320287, 3.337, 2.919042930652537, 2.646, 2.4387202060527526, 2.2760000000000002, 2.1366358330309474, 2.015, 1.905464795761565, 1.803, 1.702575392399664, 1.601, 1.4950828498404518, 1.386, 1.2749275085576262, 1.167, 1.0673520988137917, 1.0000000000000002, 0.9889598985596247, 0.999, 0.9948885098284603, 0.987, 0.9857090424696132, 0.985, 0.9788572353538606, 0.97, 0.9611475454072232, 0.95, 0.9342574922028001, 0.92, 0.9133075013759765, 0.91, 0.9058974995413411, 0.901
};

const double oxy_data[] = {
    185.0, 192.57373720944835, 195.0, 192.2787883716549, 200.0, 233.75353256062215, 270.473, 287.09201626461225, 263.925, 181.28636985170434, 108.075, 113.18976462516179, 131.344, 97.25104239732498, 52.19100000000001, 37.443980990888335, 36.028999999999996, 30.965071657345057, 24.951, 20.68558906504135, 17.759000000000004, 15.761393952406863, 14.371999999999998, 13.27004722051748, 12.369000000000002, 11.582322724488264, 11.005000000000003, 10.732016432552953, 10.893, 11.617578680194026, 13.921, 18.8185114862829, 24.400999999999996, 28.759352402108576, 30.281000000000002, 27.353374101065647, 22.739, 19.200402991497548, 17.885, 19.940207949949095, 23.322, 25.986349308807895, 24.521, 15.513696197203544, 5.762, 2.0634735079708535, 1.475, 1.0534627549713358, 0.778, 0.6277499622011322, 0.53, 0.4120374718218712, 0.307, 0.24802520686764065, 0.21900000000000003, 0.2038112869722848, 0.19600000000000006, 0.18910707129865068, 0.18200000000000002, 0.17354628523581117, 0.16500000000000004, 0.1576152172864823, 0.152, 0.1487624110452951, 0.148, 0.14981031644174703, 0.15200000000000002, 0.1523756903042227, 0.152, 0.15193554173291662, 0.15200000000000002, 0.15201105929827746, 0.152, 0.15199810247741857, 0.152, 0.15200032583721096, 0.15200000000000002, 0.1519999424993157, 0.15200000000000002, 0.15200001916689476, 0.152

};
const std::vector<double> wavelengths = { 400.00, 410.00, 420.00, 430.00, 440.00, 450.00, 460.00, 470.00, 480.00, 490.00, 500.00, 510.00, 520.00, 530.00, 540.00, 550.00, 560.00, 570.00, 580.00, 590.00, 600.00, 610.00, 620.00, 630.00, 640.00, 650.00, 660.00, 670.00, 680.00, 690.00, 700.00, 710.00, 720.00, 730.00, 740.00, 750.00, 760.00, 770.00, 780.00 };
const int numCoefficients = sizeof(wavelengths);
const vector<std::pair<double, double>> deoxy_hb = {
    {380, 97.58},
    {385, 97.25},
    {390, 100.02},
    {395, 105.91},
    {400, 119.19},
    {405, 144.12},
    {410, 171.32},
    {415, 191.37},
    {420, 213.69},
    {425, 247.7},
    {430, 272.27},
    {435, 266.26},
    {440, 223.01},
    {445, 135.87},
    {450, 51.6},
    {455, 16.98},
    {460, 9.88},
    {465, 8.21},
    {470, 8.9},
    {475, 8.87},
    {480, 8.63},
    {485, 8.68},
    {490, 9.12},
    {495, 10.05},
    {500, 11.37},
    {505, 12.96},
    {510, 14.67},
    {515, 16.35},
    {520, 18.11},
    {525, 20.04},
    {530, 22.13},
    {535, 24.35},
    {540, 26.43},
    {545, 28.1},
    {550, 29.25},
    {555, 29.76},
    {560, 29.67},
    {565, 28.99},
    {570, 27.54},
    {575, 25.13},
    {580, 21.95},
    {585, 18.22},
    {590, 14.47},
    {595, 11.21},
    {600, 8.53},
    {605, 6.47},
    {610, 4.98},
    {615, 3.98},
    {620, 3.34},
    {625, 2.92},
    {630, 2.65},
    {635, 2.44},
    {640, 2.28},
    {645, 2.14},
    {650, 2.02},
    {655, 1.91},
    {660, 1.8},
    {665, 1.7},
    {670, 1.6},
    {675, 1.5},
    {680, 1.39},
    {685, 1.27},
    {690, 1.17},
    {695, 1.07},
    {700, 1.0},
    {705, 0.99},
    {710, 1.0},
    {715, 0.99},
    {720, 0.99},
    {725, 0.99},
    {730, 0.98},
    {735, 0.98},
    {740, 0.97},
    {745, 0.96},
    {750, 0.95},
    {755, 0.93},
    {760, 0.92},
    {765, 0.91},
    {770, 0.91},
    {775, 0.91},
    {780, 0.9}
};

const vector<std::pair<double, double>> oxy_hb = {
    {380, 185.0},
    {385, 192.57},
    {390, 195.0},
    {395, 192.28},
    {400, 200.0},
    {405, 233.75},
    {410, 270.47},
    {415, 287.09},
    {420, 263.93},
    {425, 181.29},
    {430, 108.08},
    {435, 113.19},
    {440, 131.34},
    {445, 97.25},
    {450, 52.19},
    {455, 37.44},
    {460, 36.03},
    {465, 30.97},
    {470, 24.95},
    {475, 20.69},
    {480, 17.76},
    {485, 15.76},
    {490, 14.37},
    {495, 13.27},
    {500, 12.37},
    {505, 11.58},
    {510, 11.01},
    {515, 10.73},
    {520, 10.89},
    {525, 11.62},
    {530, 13.92},
    {535, 18.82},
    {540, 24.4},
    {545, 28.76},
    {550, 30.28},
    {555, 27.35},
    {560, 22.74},
    {565, 19.2},
    {570, 17.89},
    {575, 19.94},
    {580, 23.32},
    {585, 25.99},
    {590, 24.52},
    {595, 15.51},
    {600, 5.76},
    {605, 2.06},
    {610, 1.48},
    {615, 1.05},
    {620, 0.78},
    {625, 0.63},
    {630, 0.53},
    {635, 0.41},
    {640, 0.31},
    {645, 0.25},
    {650, 0.22},
    {655, 0.2},
    {660, 0.2},
    {665, 0.19},
    {670, 0.18},
    {675, 0.17},
    {680, 0.17},
    {685, 0.16},
    {690, 0.15},
    {695, 0.15},
    {700, 0.15},
    {705, 0.15},
    {710, 0.15},
    {715, 0.15},
    {720, 0.15},
    {725, 0.15},
    {730, 0.15},
    {735, 0.15},
    {740, 0.15},
    {745, 0.15},
    {750, 0.15},
    {755, 0.15},
    {760, 0.15},
    {765, 0.15},
    {770, 0.15},
    {775, 0.15},
    {780, 0.15}
};
//D65 Illuminant
//[300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830]
//[0.0341, 0.36014, 0.68618, 1.01222, 1.33826, 1.6643, 1.99034, 2.31638, 2.64242, 2.96846, 3.2945, 4.98865, 6.6828, 8.37695, 10.0711, 11.7652, 13.4594, 15.1535, 16.8477, 18.5418, 20.236, 21.9177, 23.5995, 25.2812, 26.963, 28.6447, 30.3265, 32.0082, 33.69, 35.3717, 37.0535, 37.343, 37.6326, 37.9221, 38.2116, 38.5011, 38.7907, 39.0802, 39.3697, 39.6593, 39.9488, 40.4451, 40.9414, 41.4377, 41.934, 42.4302, 42.9265, 43.4228, 43.9191, 44.4154, 44.9117, 45.0844, 45.257, 45.4297, 45.6023, 45.775, 45.9477, 46.1203, 46.293, 46.4656, 46.6383, 47.1834, 47.7285, 48.2735, 48.8186, 49.3637, 49.9088, 50.4539, 50.9989, 51.544, 52.0891, 51.8777, 51.6664, 51.455, 51.2437, 51.0323, 50.8209, 50.6096, 50.3982, 50.1869, 49.9755, 50.4428, 50.91, 51.3773, 51.8446, 52.3118, 52.7791, 53.2464, 53.7137, 54.1809, 54.6482, 57.4589, 60.2695, 63.0802, 65.8909, 68.7015, 71.5122, 74.3229, 77.1336, 79.9442, 82.7549, 83.628, 84.5011, 85.3742, 86.2473, 87.1204, 87.9936, 88.8667, 89.7398, 90.6129, 91.486, 91.6806, 91.8752, 92.0697, 92.2643, 92.4589, 92.6535, 92.8481, 93.0426, 93.2372, 93.4318, 92.7568, 92.0819, 91.4069, 90.732, 90.057, 89.3821, 88.7071, 88.0322, 87.3572, 86.6823, 88.5006, 90.3188, 92.1371, 93.9554, 95.7736, 97.5919, 99.4102, 101.228, 103.047, 104.865, 106.079, 107.294, 108.508, 109.722, 110.936, 112.151, 113.365, 114.579, 115.794, 117.008, 117.088, 117.169, 117.249, 117.33, 117.41, 117.49, 117.571, 117.651, 117.732, 117.812, 117.517, 117.222, 116.927, 116.632, 116.336, 116.041, 115.746, 115.451, 115.156, 114.861, 114.967, 115.073, 115.18, 115.286, 115.392, 115.498, 115.604, 115.711, 115.817, 115.923, 115.212, 114.501, 113.789, 113.078, 112.367, 111.656, 110.945, 110.233, 109.522, 108.811, 108.865, 108.92, 108.974, 109.028, 109.082, 109.137, 109.191, 109.245, 109.3, 109.354, 109.199, 109.044, 108.888, 108.733, 108.578, 108.423, 108.268, 108.112, 107.957, 107.802, 107.501, 107.2, 106.898, 106.597, 106.296, 105.995, 105.694, 105.392, 105.091, 104.79, 105.08, 105.37, 105.66, 105.95, 106.239, 106.529, 106.819, 107.109, 107.399, 107.689, 107.361, 107.032, 106.704, 106.375, 106.047, 105.719, 105.39, 105.062, 104.733, 104.405, 104.369, 104.333, 104.297, 104.261, 104.225, 104.19, 104.154, 104.118, 104.082, 104.046, 103.641, 103.237, 102.832, 102.428, 102.023, 101.618, 101.214, 100.809, 100.405, 100.0, 99.6334, 99.2668, 98.9003, 98.5337, 98.1671, 97.8005, 97.4339, 97.0674, 96.7008, 96.3342, 96.2796, 96.225, 96.1703, 96.1157, 96.0611, 96.0065, 95.9519, 95.8972, 95.8426, 95.788, 95.0778, 94.3675, 93.6573, 92.947, 92.2368, 91.5266, 90.8163, 90.1061, 89.3958, 88.6856, 88.8177, 88.9497, 89.0818, 89.2138, 89.3459, 89.478, 89.61, 89.7421, 89.8741, 90.0062, 89.9655, 89.9248, 89.8841, 89.8434, 89.8026, 89.7619, 89.7212, 89.6805, 89.6398, 89.5991, 89.4091, 89.219, 89.029, 88.8389, 88.6489, 88.4589, 88.2688, 88.0788, 87.8887, 87.6987, 87.2577, 86.8167, 86.3757, 85.9347, 85.4936, 85.0526, 84.6116, 84.1706, 83.7296, 83.2886, 83.3297, 83.3707, 83.4118, 83.4528, 83.4939, 83.535, 83.576, 83.6171, 83.6581, 83.6992, 83.332, 82.9647, 82.5975, 82.2302, 81.863, 81.4958, 81.1285, 80.7613, 80.394, 80.0268, 80.0456, 80.0644, 80.0831, 80.1019, 80.1207, 80.1395, 80.1583, 80.177, 80.1958, 80.2146, 80.4209, 80.6272, 80.8336, 81.0399, 81.2462, 81.4525, 81.6588, 81.8652, 82.0715, 82.2778, 81.8784, 81.4791, 81.0797, 80.6804, 80.281, 79.8816, 79.4823, 79.0829, 78.6836, 78.2842, 77.4279, 76.5716, 75.7153, 74.859, 74.0027, 73.1465, 72.2902, 71.4339, 70.5776, 69.7213, 69.9101, 70.0989, 70.2876, 70.4764, 70.6652, 70.854, 71.0428, 71.2315, 71.4203, 71.6091, 71.8831, 72.1571, 72.4311, 72.7051, 72.979, 73.253, 73.527, 73.801, 74.075, 74.349, 73.0745, 71.8, 70.5255, 69.251, 67.9765, 66.702, 65.4275, 64.153, 62.8785, 61.604, 62.4322, 63.2603, 64.0885, 64.9166, 65.7448, 66.573, 67.4011, 68.2293, 69.0574, 69.8856, 70.4057, 70.9259, 71.446, 71.9662, 72.4863, 73.0064, 73.5266, 74.0467, 74.5669, 75.087, 73.9376, 72.7881, 71.6387, 70.4893, 69.3398, 68.1904, 67.041, 65.8916, 64.7421, 63.5927, 61.8752, 60.1578, 58.4403, 56.7229, 55.0054, 53.288, 51.5705, 49.8531, 48.1356, 46.4182, 48.4569, 50.4956, 52.5344, 54.5731, 56.6118, 58.6505, 60.6892, 62.728, 64.7667, 66.8054, 66.4631, 66.1209, 65.7786, 65.4364, 65.0941, 64.7518, 64.4096, 64.0673, 63.7251, 63.3828, 63.4749, 63.567, 63.6592, 63.7513, 63.8434, 63.9355, 64.0276, 64.1198, 64.2119, 64.304, 63.8188, 63.3336, 62.8484, 62.3632, 61.8779, 61.3927, 60.9075, 60.4223, 59.9371, 59.4519, 58.7026, 57.9533, 57.204, 56.4547, 55.7054, 54.9562, 54.2069, 53.4576, 52.7083, 51.959, 52.5072, 53.0553, 53.6035, 54.1516, 54.6998, 55.248, 55.7961, 56.3443, 56.8924, 57.4406, 57.7278, 58.015, 58.3022, 58.5894, 58.8765, 59.1637, 59.4509, 59.7381, 60.0253, 60.3125]

const std::map<double, double> D65_ILLUMINANT = {
{300, 0.0341},
{301, 0.36014},
{302, 0.68618},
{303, 1.01222},
{304, 1.33826},
{305, 1.6643},
{306, 1.99034},
{307, 2.31638},
{308, 2.64242},
{309, 2.96846},
{310, 3.2945},
{311, 4.98865},
{312, 6.6828},
{313, 8.37695},
{314, 10.0711},
{315, 11.7652},
{316, 13.4594},
{317, 15.1535},
{318, 16.8477},
{319, 18.5418},
{320, 20.236},
{321, 21.9177},
{322, 23.5995},
{323, 25.2812},
{324, 26.963},
{325, 28.6447},
{326, 30.3265},
{327, 32.0082},
{328, 33.69},
{329, 35.3717},
{330, 37.0535},
{331, 37.343},
{332, 37.6326},
{333, 37.9221},
{334, 38.2116},
{335, 38.5011},
{336, 38.7907},
{337, 39.0802},
{338, 39.3697},
{339, 39.6593},
{340, 39.9488},
{341, 40.4451},
{342, 40.9414},
{343, 41.4377},
{344, 41.934},
{345, 42.4302},
{346, 42.9265},
{347, 43.4228},
{348, 43.9191},
{349, 44.4154},
{350, 44.9117},
{351, 45.0844},
{352, 45.257},
{353, 45.4297},
{354, 45.6023},
{355, 45.775},
{356, 45.9477},
{357, 46.1203},
{358, 46.293},
{359, 46.4656},
{360, 46.6383},
{361, 47.1834},
{362, 47.7285},
{363, 48.2735},
{364, 48.8186},
{365, 49.3637},
{366, 49.9088},
{367, 50.4539},
{368, 50.9989},
{369, 51.544},
{370, 52.0891},
{371, 51.8777},
{372, 51.6664},
{373, 51.455},
{374, 51.2437},
{375, 51.0323},
{376, 50.8209},
{377, 50.6096},
{378, 50.3982},
{379, 50.1869},
{380, 49.9755},
{381, 50.4428},
{382, 50.91},
{383, 51.3773},
{384, 51.8446},
{385, 52.3118},
{386, 52.7791},
{387, 53.2464},
{388, 53.7137},
{389, 54.1809},
{390, 54.6482},
{391, 57.4589},
{392, 60.2695},
{393, 63.0802},
{394, 65.8909},
{395, 68.7015},
{396, 71.5122},
{397, 74.3229},
{398, 77.1336},
{399, 79.9442},
{400, 82.7549},
{401, 83.628},
{402, 84.5011},
{403, 85.3742},
{404, 86.2473},
{405, 87.1204},
{406, 87.9936},
{407, 88.8667},
{408, 89.7398},
{409, 90.6129},
{410, 91.486},
{411, 91.6806},
{412, 91.8752},
{413, 92.0697},
{414, 92.2643},
{415, 92.4589},
{416, 92.6535},
{417, 92.8481},
{418, 93.0426},
{419, 93.2372},
{420, 93.4318},
{421, 92.7568},
{422, 92.0819},
{423, 91.4069},
{424, 90.732},
{425, 90.057},
{426, 89.3821},
{427, 88.7071},
{428, 88.0322},
{429, 87.3572},
{430, 86.6823},
{431, 88.5006},
{432, 90.3188},
{433, 92.1371},
{434, 93.9554},
{435, 95.7736},
{436, 97.5919},
{437, 99.4102},
{438, 101.228},
{439, 103.047},
{440, 104.865},
{441, 106.079},
{442, 107.294},
{443, 108.508},
{444, 109.722},
{445, 110.936},
{446, 112.151},
{447, 113.365},
{448, 114.579},
{449, 115.794},
{450, 117.008},
{451, 117.088},
{452, 117.169},
{453, 117.249},
{454, 117.33},
{455, 117.41},
{456, 117.49},
{457, 117.571},
{458, 117.651},
{459, 117.732},
{460, 117.812},
{461, 117.517},
{462, 117.222},
{463, 116.927},
{464, 116.632},
{465, 116.336},
{466, 116.041},
{467, 115.746},
{468, 115.451},
{469, 115.156},
{470, 114.861},
{471, 114.967},
{472, 115.073},
{473, 115.18},
{474, 115.286},
{475, 115.392},
{476, 115.498},
{477, 115.604},
{478, 115.711},
{479, 115.817},
{480, 115.923},
{481, 115.212},
{482, 114.501},
{483, 113.789},
{484, 113.078},
{485, 112.367},
{486, 111.656},
{487, 110.945},
{488, 110.233},
{489, 109.522},
{490, 108.811},
{491, 108.865},
{492, 108.92},
{493, 108.974},
{494, 109.028},
{495, 109.082},
{496, 109.137},
{497, 109.191},
{498, 109.245},
{499, 109.3},
{500, 109.354},
{501, 109.199},
{502, 109.044},
{503, 108.888},
{504, 108.733},
{505, 108.578},
{506, 108.423},
{507, 108.268},
{508, 108.112},
{509, 107.957},
{510, 107.802},
{511, 107.501},
{512, 107.2},
{513, 106.898},
{514, 106.597},
{515, 106.296},
{516, 105.995},
{517, 105.694},
{518, 105.392},
{519, 105.091},
{520, 104.79},
{521, 105.08},
{522, 105.37},
{523, 105.66},
{524, 105.95},
{525, 106.239},
{526, 106.529},
{527, 106.819},
{528, 107.109},
{529, 107.399},
{530, 107.689},
{531, 107.361},
{532, 107.032},
{533, 106.704},
{534, 106.375},
{535, 106.047},
{536, 105.719},
{537, 105.39},
{538, 105.062},
{539, 104.733},
{540, 104.405},
{541, 104.369},
{542, 104.333},
{543, 104.297},
{544, 104.261},
{545, 104.225},
{546, 104.19},
{547, 104.154},
{548, 104.118},
{549, 104.082},
{550, 104.046},
{551, 103.641},
{552, 103.237},
{553, 102.832},
{554, 102.428},
{555, 102.023},
{556, 101.618},
{557, 101.214},
{558, 100.809},
{559, 100.405},
{560, 100.0},
{561, 99.6334},
{562, 99.2668},
{563, 98.9003},
{564, 98.5337},
{565, 98.1671},
{566, 97.8005},
{567, 97.4339},
{568, 97.0674},
{569, 96.7008},
{570, 96.3342},
{571, 96.2796},
{572, 96.225},
{573, 96.1703},
{574, 96.1157},
{575, 96.0611},
{576, 96.0065},
{577, 95.9519},
{578, 95.8972},
{579, 95.8426},
{580, 95.788},
{581, 95.0778},
{582, 94.3675},
{583, 93.6573},
{584, 92.947},
{585, 92.2368},
{586, 91.5266},
{587, 90.8163},
{588, 90.1061},
{589, 89.3958},
{590, 88.6856},
{591, 88.8177},
{592, 88.9497},
{593, 89.0818},
{594, 89.2138},
{595, 89.3459},
{596, 89.478},
{597, 89.61},
{598, 89.7421},
{599, 89.8741},
{600, 90.0062},
{601, 89.9655},
{602, 89.9248},
{603, 89.8841},
{604, 89.8434},
{605, 89.8026},
{606, 89.7619},
{607, 89.7212},
{608, 89.6805},
{609, 89.6398},
{610, 89.5991},
{611, 89.4091},
{612, 89.219},
{613, 89.029},
{614, 88.8389},
{615, 88.6489},
{616, 88.4589},
{617, 88.2688},
{618, 88.0788},
{619, 87.8887},
{620, 87.6987},
{621, 87.2577},
{622, 86.8167},
{623, 86.3757},
{624, 85.9347},
{625, 85.4936},
{626, 85.0526},
{627, 84.6116},
{628, 84.1706},
{629, 83.7296},
{630, 83.2886},
{631, 83.3297},
{632, 83.3707},
{633, 83.4118},
{634, 83.4528},
{635, 83.4939},
{636, 83.535},
{637, 83.576},
{638, 83.6171},
{639, 83.6581},
{640, 83.6992},
{641, 83.332},
{642, 82.9647},
{643, 82.5975},
{644, 82.2302},
{645, 81.863},
{646, 81.4958},
{647, 81.1285},
{648, 80.7613},
{649, 80.394},
{650, 80.0268},
{651, 80.0456},
{652, 80.0644},
{653, 80.0831},
{654, 80.1019},
{655, 80.1207},
{656, 80.1395},
{657, 80.1583},
{658, 80.177},
{659, 80.1958},
{660, 80.2146},
{661, 80.4209},
{662, 80.6272},
{663, 80.8336},
{664, 81.0399},
{665, 81.2462},
{666, 81.4525},
{667, 81.6588},
{668, 81.8652},
{669, 82.0715},
{670, 82.2778},
{671, 81.8784},
{672, 81.4791},
{673, 81.0797},
{674, 80.6804},
{675, 80.281},
{676, 79.8816},
{677, 79.4823},
{678, 79.0829},
{679, 78.6836},
{680, 78.2842},
{681, 77.4279},
{682, 76.5716},
{683, 75.7153},
{684, 74.859},
{685, 74.0027},
{686, 73.1465},
{687, 72.2902},
{688, 71.4339},
{689, 70.5776},
{690, 69.7213},
{691, 69.9101},
{692, 70.0989},
{693, 70.2876},
{694, 70.4764},
{695, 70.6652},
{696, 70.854},
{697, 71.0428},
{698, 71.2315},
{699, 71.4203},
{700, 71.6091},
{701, 71.8831},
{702, 72.1571},
{703, 72.4311},
{704, 72.7051},
{705, 72.979},
{706, 73.253},
{707, 73.527},
{708, 73.801},
{709, 74.075},
{710, 74.349},
{711, 73.0745},
{712, 71.8},
{713, 70.5255},
{714, 69.251},
{715, 67.9765},
{716, 66.702},
{717, 65.4275},
{718, 64.153},
{719, 62.8785},
{720, 61.604},
{721, 62.4322},
{722, 63.2603},
{723, 64.0885},
{724, 64.9166},
{725, 65.7448},
{726, 66.573},
{727, 67.4011},
{728, 68.2293},
{729, 69.0574},
{730, 69.8856},
{731, 70.4057},
{732, 70.9259},
{733, 71.446},
{734, 71.9662},
{735, 72.4863},
{736, 73.0064},
{737, 73.5266},
{738, 74.0467},
{739, 74.5669},
{740, 75.087},
{741, 73.9376},
{742, 72.7881},
{743, 71.6387},
{744, 70.4893},
{745, 69.3398},
{746, 68.1904},
{747, 67.041},
{748, 65.8916},
{749, 64.7421},
{750, 63.5927},
{751, 61.8752},
{752, 60.1578},
{753, 58.4403},
{754, 56.7229},
{755, 55.0054},
{756, 53.288},
{757, 51.5705},
{758, 49.8531},
{759, 48.1356},
{760, 46.4182},
{761, 48.4569},
{762, 50.4956},
{763, 52.5344},
{764, 54.5731},
{765, 56.6118},
{766, 58.6505},
{767, 60.6892},
{768, 62.728},
{769, 64.7667},
{770, 66.8054},
{771, 66.4631},
{772, 66.1209},
{773, 65.7786},
{774, 65.4364},
{775, 65.0941},
{776, 64.7518},
{777, 64.4096},
{778, 64.0673},
{779, 63.7251},
{780, 63.3828},
{781, 63.4749},
{782, 63.567},
{783, 63.6592},
{784, 63.7513},
{785, 63.8434},
{786, 63.9355},
{787, 64.0276},
{788, 64.1198},
{789, 64.2119},
{790, 64.304},
{791, 63.8188},
{792, 63.3336},
{793, 62.8484},
{794, 62.3632},
{795, 61.8779},
{796, 61.3927},
{797, 60.9075},
{798, 60.4223},
{799, 59.9371},
{800, 59.4519},
{801, 58.7026},
{802, 57.9533},
{803, 57.204},
{804, 56.4547},
{805, 55.7054},
{806, 54.9562},
{807, 54.2069},
{808, 53.4576},
{809, 52.7083},
{810, 51.959},
{811, 52.5072},
{812, 53.0553},
{813, 53.6035},
{814, 54.1516},
{815, 54.6998},
{816, 55.248},
{817, 55.7961},
{818, 56.3443},
{819, 56.8924},
{820, 57.4406},
{821, 57.7278},
{822, 58.015},
{823, 58.3022},
{824, 58.5894},
{825, 58.8765},
{826, 59.1637},
{827, 59.4509},
{828, 59.7381},
{829, 60.0253},
{830, 60.3125}
};
double getDeoxyHbValue(int wavelength);
double getOxyHbValue(int wavelength);
double RFresnel(double, double, double);

double xFit_1931(double wave);
double yFit_1931(double wave);
double zFit_1931(double wave);
double gamma_correction(double C);

std::vector<double> XYZ_to_sRGB(std::vector<double> xyz, int step_size);
std::vector<double> Get_RGB(std::vector<double> reflectances, int step_size);

void WriteRowToCSV(std::ofstream& file, const std::vector<double>& row);
void WriteHeaderToCSV(std::ofstream& file);
std::pair<double, double> calculate_absorption_coefficient(double wavelength);